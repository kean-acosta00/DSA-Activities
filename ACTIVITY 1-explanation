# STEP 1: A CLASS FOR THE GRAPH CALCULATOR 
# The code defines a class, `Graph_Gen`, which generates various graphs and saves the results in text files.
# It initializes `x`, a list of integers from 1 to 50.
# The class has 10 methods, `graph1` through `graph10`, each calculating a specific graph's values and saving them in a corresponding text file.
# Each method computes graph values based on different mathematical expressions, then writes them to a file.
# It imports the `math` module for trigonometric functions.
# An instance of `Graph_Gen` is created, and each graph method is called to generate and save its corresponding graph's results.

# STEP 2: GRAPH PRESENTATION AND OPTIONS
# The code imports libraries for plotting graphs and the `Graph_Gen` class.
# It creates a graph generator instance.
# The program asks the user to choose:
  # Show a specific graph (1-10).
  # Display all graphs.
  # Exit the program.
# If the user picks:
  # A specific graph: It reads the data and plots it.
  # All graphs: It plots all graphs on one plot with different labels.
  # Exit: It ends the program.
# If the user enters an invalid option, it prompts them to choose a valid one.
